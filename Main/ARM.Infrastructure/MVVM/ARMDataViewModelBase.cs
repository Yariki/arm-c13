///////////////////////////////////////////////////////////
//  ARMDataViewModelBase.cs
//  Implementation of the Class ARMDataViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 8:12:16 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Windows.Input;
using ARM.Core.Interfaces;
using ARM.Core.MVVM;

namespace ARM.Infrastructure.MVVM
{
    public class ARMDataViewModelBase : ARMWorkspaceViewModelBase, IARMDataViewModel
    {
        private object _dataObject;
        private Dictionary<string, object> _values;

        ///
        /// <param name="businessObject"></param>
        /// <param name="view"></param>
        protected ARMDataViewModelBase(object businessObject, IARMView view) 
            : base(view)
        {
        }

        ///
        /// <param name="obj"></param>
        protected void SetBusinessObject(object obj)
        {
        }

        protected object GetBusinessObject()
        {
            return null;
        }

        ///
        /// <param name="expression"></param>
        protected T Get<T>(Expression<Func<T>> expression)
        {
            return default(T);
        }

        ///
        /// <param name="expression"></param>
        /// <param name="defaultValue"></param>
        protected T Get<T>(Expression<Func<T>> expression, T defaultValue)
        {
            return default(T);
        }

        ///
        /// <param name="name"></param>
        protected T Get<T>(string name)
        {
            return default(T);
        }

        ///
        /// <param name="name"></param>
        /// <param name="defaultValue"></param>
        protected T Get<T>(string name, T defaultValue)
        {
            return default(T);
        }

        ///
        /// <param name="expression"></param>
        /// <param name="val"></param>
        protected void Set<T>(Expression<Func<T>> expression, T val)
        {
        }

        ///
        /// <param name="name"></param>
        /// <param name="val"></param>
        protected void Set<T>(string name, T val)
        {
        }

        ///
        /// <param name="name"></param>
        protected virtual void Validate(string name)
        {
        }

        public IARMView View
        {
            get;
            set;
        }

        public object DataObject()
        {
            return null;
        }
		
		#region [commands]
		
		public ICommand SaveCommand {get;private set;}
		
		public ICommand CancelCommand {get;private set;}
			
		#endregion
		
		
    }//end ARMDataViewModelBase
}//end namespace MVVM