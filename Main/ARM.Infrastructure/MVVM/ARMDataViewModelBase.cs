///////////////////////////////////////////////////////////
//  ARMDataViewModelBase.cs
//  Implementation of the Class ARMDataViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 8:12:16 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;
using ARM.Core.Interfaces;
using ARM.Core.MVVM;
using ARM.Core.Service;
using ARM.Core.Extensions;

namespace ARM.Infrastructure.MVVM
{
    public class ARMDataViewModelBase : ARMWorkspaceViewModelBase, IARMDataViewModel
    {
        private object _dataObject;
        private readonly Dictionary<string, object> _values = new Dictionary<string, object>();
        private readonly List<IARMModelPropertyInfo> _listProperty; 

        ///
        /// <param name="businessObject"></param>
        /// <param name="view"></param>
        protected ARMDataViewModelBase(object businessObject, IARMView view) 
            : base(view)
        {
            _listProperty = ARMModelsPropertyCache.Instance.GetPropertyInfos(businessObject.GetType()).ToList();
        }

        ///
        /// <param name="obj"></param>
        protected void SetBusinessObject<TObj>(TObj obj)
        {
            this._dataObject = (object) obj;
        }

        protected TObj GetBusinessObject<TObj>()
        {
            return (TObj)_dataObject;
        }

        protected bool HasProperty(string name)
        {
            if (!_listProperty.Any())
                return false;
            return _listProperty.Any(i => i.Property.Name == name);
        }

        protected IARMModelPropertyInfo GetPropertyInfo(string name)
        {
            if (!_listProperty.Any())
                return null;
            return _listProperty.FirstOrDefault(i => i.Property.Name == name);
        }

        ///
        /// <param name="expression"></param>
        protected T Get<T>(Expression<Func<T>> expression)
        {
            return Get<T>(this.GetPropertyName(expression), default(T));
        }

        ///
        /// <param name="expression"></param>
        /// <param name="defaultValue"></param>
        protected T Get<T>(Expression<Func<T>> expression, T defaultValue)
        {
            return Get<T>(this.GetPropertyName(expression),defaultValue);
        }

        ///
        /// <param name="name"></param>
        protected T Get<T>(string name)
        {
            return Get<T>(name,default(T));
        }

        ///
        /// <param name="name"></param>
        /// <param name="defaultValue"></param>
        protected T Get<T>(string name, T defaultValue)
        {
            if (_dataObject != null && HasProperty(name))
            {
                IARMModelPropertyInfo pi = GetPropertyInfo(name);
                return pi.Property.GetPropertyValue<T>(_dataObject);
            }
            if (_values.ContainsKey(name))
            {
                return (T)_values[name];
            }
            return defaultValue;
        }

        ///
        /// <param name="expression"></param>
        /// <param name="val"></param>
        protected void Set<T>(Expression<Func<T>> expression, T val)
        {
        }

        ///
        /// <param name="name"></param>
        /// <param name="val"></param>
        protected void Set<T>(string name, T val)
        {
        }

        ///
        /// <param name="name"></param>
        protected virtual void Validate(string name)
        {
        }

        public IARMView View
        {
            get;
            set;
        }

        public object DataObject()
        {
            return null;
        }
		
		#region [commands]
		
		public ICommand SaveCommand {get;private set;}
		
		public ICommand CancelCommand {get;private set;}
			
		#endregion
		
		
    }//end ARMDataViewModelBase
}//end namespace MVVM