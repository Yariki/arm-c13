///////////////////////////////////////////////////////////
//  ARMDataViewModelBase.cs
//  Implementation of the Class ARMDataViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 8:12:16 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Windows;
using System.Windows.Input;
using ARM.Core.Enums;
using ARM.Core.Interfaces;
using ARM.Core.MVVM;
using ARM.Core.Service;
using ARM.Core.Extensions;
using ARM.Data.Models;
using ARM.Data.Sevice.Resolver;
using ARM.Data.UnitOfWork.Implementation;
using ARM.Infrastructure.Events;
using ARM.Infrastructure.Events.EventPayload;
using ARM.Infrastructure.Facade;
using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;

namespace ARM.Infrastructure.MVVM
{
  /// <summary>
  /// Базовий клас для моделей представлення, які працюють з моделями даних.
  /// </summary>
  public abstract class ARMDataViewModelBase : ARMWorkspaceViewModelBase, IARMDataViewModel
  {
    /// <summary>
    /// обєкт даних
    /// </summary>
    private object _dataObject;
    /// <summary>
    /// Список властивостей типу моделі даних.
    /// </summary>
    private List<IARMModelPropertyInfo> _listProperty;

    /// <summary>
    /// Ініціалізує новий екземпляр класу <see cref="ARMDataViewModelBase"/>.
    /// </summary>
    /// <param name="regionManager">Менеджер регіонів.</param>
    /// <param name="unityContainer">Контейнер IoC.</param>
    /// <param name="eventAggregator">Агрегатор подій.</param>
    /// <param name="view">Користувацький інтерфейс.</param>
    protected ARMDataViewModelBase(IRegionManager regionManager, IUnityContainer unityContainer, IEventAggregator eventAggregator, IARMView view)
      : base(regionManager, unityContainer, eventAggregator, view)
    {
      SaveCommand = new ARMRelayCommand(SaveExecute, CanSaveExecte);
      HasChanges = false;
    }

    /// <summary>
    /// встановлення режиму роботи та моделі даних (у відповідності до метаданих та ідентифікатора)
    /// </summary>
    /// <param name="mode">Режим роботи.</param>
    /// <param name="metadata">Метадата.</param>
    /// <param name="id">Ідентифікатор.</param>
    /// <param name="isIdEmpty">Флаг, чи може фдентифікатор бути пустим.</param>
    public virtual void SetBusinessObject(ViewMode mode, eARMMetadata metadata, Guid id, bool isIdEmpty = false)
    {
      Mode = mode;
      Metadata = metadata;
      var dataModelReoslver = UnityContainer.Resolve<IARMDataModelResolver>();
      if (dataModelReoslver != null)
      {
        _dataObject = dataModelReoslver.GetDataModel(metadata, id, isIdEmpty);
        (_dataObject as BaseModel).ModifiedBy = ARMSystemFacade.Instance.CurrentUser.Name;
      }
      _listProperty = ARMModelsPropertyCache.Instance.GetPropertyInfos(_dataObject.GetType()).ToList();

    }

    /// <summary>
    /// втсановлення режиму роботи та моделі даних
    /// </summary>
    /// <param name="mode">Режим.</param>
    /// <param name="metadata">Метадата.</param>
    /// <param name="data">Модель даних.</param>
    public virtual void SetBusinessObject(ViewMode mode, eARMMetadata metadata, object data)
    {
      Mode = mode;
      Metadata = metadata;
      _dataObject = data;
      if (Mode == ViewMode.Edit)
      {
        (_dataObject as BaseModel).ModifiedBy = ARMSystemFacade.Instance.CurrentUser.Name;
      }
      _listProperty = ARMModelsPropertyCache.Instance.GetPropertyInfos(_dataObject.GetType()).ToList();
    }

    /// <summary>
    /// Режим роботи
    /// </summary>
    /// <value>
    /// Режим.
    /// </value>
    public ViewMode Mode { get; private set; }
    /// <summary>
    /// Метадата моделі даних
    /// </summary>
    public eARMMetadata Metadata { get; private set; }
    /// <summary>
    /// Повертає або втановлює наявніть змін у моделі
    /// </summary>
    /// <value>
    ///   <c>true</c> якщо зміни присутні; в іншому випадку, <c>false</c>.
    /// </value>
    public bool HasChanges { get; set; }

    /// <summary>
    /// Закриття цього екземпляра.
    /// </summary>
    /// <returns></returns>
    public override bool Closing()
    {
      if (HasChanges)
      {
        var result = ARMSystemFacade.Instance.MessageBox.ShowQuestion(Resource.AppResource.Resources.Message_Save);
        if (result == MessageBoxResult.Yes)
        {
          SaveExecute(null);
        }
      }
      return false;
    }


    /// <summary>
    /// Повернути значення властивості.
    /// </summary>
    /// <typeparam name="T">Тип результату</typeparam>
    /// <param name="name">Назва властивості.</param>
    /// <param name="defaultValue">Значення по-замовчуванню.</param>
    /// <returns></returns>
    protected override T Get<T>(string name, T defaultValue)
    {
      if (_dataObject != null && HasProperty(name))
      {
        IARMModelPropertyInfo pi = GetPropertyInfo(name);
        var val = pi != null ? pi.Property.GetPropertyValue<T>(_dataObject) : defaultValue;
        return val;
      }
      else
        return base.Get<T>(name, defaultValue);
    }

    /// <summary>
    /// Встановити значення властивості.
    /// </summary>
    /// <typeparam name="T">Тип значення.</typeparam>
    /// <param name="name">Назва властивості.</param>
    /// <param name="val">Значення.</param>
    protected override void Set<T>(string name, T val)
    {
      if (_dataObject != null && HasProperty(name))
      {
        IARMModelPropertyInfo pi = GetPropertyInfo(name);
        if (pi != null)
        {
          pi.Property.SetPropertyValue(_dataObject, val);
          HasChanges = true;
        }
        OnPropertyChanged(name);
        OnSetValue(name);
      }
      else
        base.Set(name, val);
    }

    /// <summary>
    /// Повернути обєкт даних у відповідності до типу.
    /// </summary>
    /// <typeparam name="TObj">Тип значення.</typeparam>
    /// <returns></returns>
    public TObj GetBusinessObject<TObj>()
    {
      return (TObj)_dataObject;
    }
    /// <summary>
    /// Перевірка наявності властивості.
    /// </summary>
    /// <param name="name">Назва властивості.</param>
    /// <returns>
    ///   <c>true</c> якщо зазначене ім'я має властивість; в іншому випадку <c>false</c>.
    /// </returns>
    protected bool HasProperty(string name)
    {
      if (!Enumerable.Any<IARMModelPropertyInfo>(_listProperty))
        return false;
      return Enumerable.Any<IARMModelPropertyInfo>(_listProperty, i => i.Property.Name == name);
    }

    /// <summary>
    /// Отримує інформація про об'єкт.
    /// </summary>
    /// <param name="name">Назва властивості.</param>
    /// <returns></returns>
    protected IARMModelPropertyInfo GetPropertyInfo(string name)
    {
      if (!_listProperty.Any())
        return null;
      return _listProperty.FirstOrDefault(i => i.Property.Name == name);
    }

    /// <summary>
    /// Повернути список воастивостей типу даних.
    /// </summary>
    /// <returns></returns>
    protected IList<IARMModelPropertyInfo> GetAllArmPropertyInfo()
    {
      return _listProperty;
    }

    /// <summary>
    /// Визначає, чи доступна команда для виконання.
    /// </summary>
    /// <param name="arg">Аргумент.</param>
    /// <returns>
    ///   <c>true</c> якщо даний екземпляр вказаний обєкт доступний; в іншому випадку <c>false</c>.
    /// </returns>
    protected virtual bool CanSaveExecte(object arg)
    {
      return true;
    }

    /// <summary>
    /// Виклик зберігання обєкту.
    /// </summary>
    /// <param name="arg">Аргумент.</param>
    protected virtual void SaveExecute(object arg)
    {
      HasChanges = false;
      EventAggregator.GetEvent<ARMSyncEvent>().Publish(new ARMSyncEventPayload(Metadata));
      Close();
    }

    /// <summary>
    /// модель даних.
    /// </summary>
    public object DataObject
    {
      get { return _dataObject; }
    }

    #region [commands]

    /// <summary>
    /// Команда зберігання.
    /// </summary>
    public ICommand SaveCommand { get; private set; }

    #endregion

    #region [dispose]

    /// <summary>
    /// Звільняє некеровані і - можливо - керовані ресурси.
    /// </summary>
    /// <param name="disposing"><c>true</c> щоб звільнити керовані і некеровані ресурси; <c>false</c> щоб звільнити тільки некеровані ресурси.</param>
    protected override void Dispose(bool disposing)
    {
      if (!Disposed && disposing)
      {
        _dataObject = null;
        if (_listProperty != null)
        {
          _listProperty.Clear();
          _listProperty = null;
        }
      }
      base.Dispose(disposing);
    }

    #endregion


    #region [private]

    #endregion



  }//end ARMDataViewModelBase
}//end namespace MVVM