///////////////////////////////////////////////////////////
//  ARMValidatableViewModelBase.cs
//  Implementation of the Class ARMValidatableViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 8:12:16 PM
///////////////////////////////////////////////////////////

using System;
using System.Diagnostics.SymbolStore;
using System.Windows;
using ARM.Core.Enums;
using ARM.Core.EventArguments;
using ARM.Core.Interfaces;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;

namespace ARM.Infrastructure.MVVM
{
    public abstract class ARMValidatableViewModelBase : ARMDataViewModelBase, IARMValidatableViewModel
    {
        private ARM.Core.Interfaces.IARMValidationAdaptor _validationAdaptor;
        

        ///
        /// <param name="businessObject"></param>
        /// <param name="view"></param>
        protected ARMValidatableViewModelBase(IRegionManager regionManager,IUnityContainer unityContainer,IEventAggregator eventAggregator,IARMView view) 
            : base(regionManager,unityContainer,eventAggregator,view)
        {
            _validationAdaptor = UnityContainer.Resolve<IARMValidationAdaptor>();
        }


        public override void SetBusinessObject(ViewMode mode,eARMMetadata metadata, Guid id)
        {
            base.SetBusinessObject(mode,metadata,id);
            _validationAdaptor.SetValidationObject(GetBusinessObject<object>(), GetAllArmPropertyInfo());
            _validationAdaptor.ValidationCompleted += ValidationAdaptorOnValidationCompleted;
            IsValid = true;
        }

        private void ValidationAdaptorOnValidationCompleted(object sender, ValidationEventArgs validationEventArgs)
        {
            if (!validationEventArgs.Result.IsValid)
            {
                OnPropertyChanged(validationEventArgs.PropertyName);
            }
            IsValid = validationEventArgs.Result.IsValid;
        }

        protected void ValidateBeforeSave()
        {
            if(_validationAdaptor == null)
                return;
            _validationAdaptor.ValidateAll();
            var res = _validationAdaptor.GetResultForAll();
            IsValid = true;
            foreach (var re in res)
            {
                if (!string.IsNullOrEmpty(re.Value))
                {
                    IsValid = false;
                    OnPropertyChanged(re.Key);
                }
            }
        }

        public string this[string columnName]
        {
            get { return _validationAdaptor[columnName]; }
        }

        public string Error 
        {
            get { return _validationAdaptor.Error; }
        }

        protected override void OnSetValue(string name)
        {
            Validate(name);
        }

        private void Validate(string name)
        {
            _validationAdaptor.Validate(name);    
        }

        public bool IsValid
        {
            get { return Get(() => IsValid); }
            set { Set(() => IsValid,value); }
        }

        public override bool Closing()
        {
            if (HasChanges && IsValid)
            {
                var result = MessageBox.Show(Resource.AppResource.Resources.Message_Save, "Warning",
                    MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (result == MessageBoxResult.Yes)
                {
                    SaveExecute(null);
                }
                return !IsValid;
            }
            return !IsValid;
        }
    }//end ARMValidatableViewModelBase
}//end namespace MVVM