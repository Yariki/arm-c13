///////////////////////////////////////////////////////////
//  ARMValidatableViewModelBase.cs
//  Implementation of the Class ARMValidatableViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 8:12:16 PM
///////////////////////////////////////////////////////////

using System;
using System.Windows;
using ARM.Core.Enums;
using ARM.Core.EventArguments;
using ARM.Core.Interfaces;
using ARM.Infrastructure.Facade;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;

namespace ARM.Infrastructure.MVVM
{
    /// <summary>
    /// Базовий клас для моделей представлення, яка забеспечує валідацію обєекта даних
    /// </summary>
    public abstract class ARMValidatableViewModelBase : ARMDataViewModelBase, IARMValidatableViewModel
    {
        /// <summary>
        /// Адаптер валідації, який безпосередньо проводить валідацію.
        /// </summary>
        private ARM.Core.Interfaces.IARMValidationAdaptor _validationAdaptor;

        /// <summary>
        /// Ініціалізує новий екземпляр класу <see cref="ARMValidatableViewModelBase"/>.
        /// </summary>
        /// <param name="regionManager">Менеджер регіонів.</param>
        /// <param name="unityContainer">Контейнер IoC.</param>
        /// <param name="eventAggregator">Агрегатор подій.</param>
        /// <param name="view">Користувацький інтерфейс.</param>
        protected ARMValidatableViewModelBase(IRegionManager regionManager, IUnityContainer unityContainer, IEventAggregator eventAggregator, IARMView view)
            : base(regionManager, unityContainer, eventAggregator, view)
        {
            _validationAdaptor = UnityContainer.Resolve<IARMValidationAdaptor>();
        }

        /// <summary>
        /// встановлення режиму роботи та моделі даних (у відповідності до метаданих та ідентифікатора)
        /// </summary>
        /// <param name="mode">Режим роботи.</param>
        /// <param name="metadata">Метадата.</param>
        /// <param name="id">Ідентифікатор.</param>
        /// <param name="isIdEmpty">Флаг, чи може фдентифікатор бути пустим.</param>
        public override void SetBusinessObject(ViewMode mode, eARMMetadata metadata, Guid id, bool isIdEmpty = false)
        {
            base.SetBusinessObject(mode, metadata, id, isIdEmpty);
            _validationAdaptor.SetValidationObject(GetBusinessObject<object>(), GetAllArmPropertyInfo());
            _validationAdaptor.ValidationCompleted += ValidationAdaptorOnValidationCompleted;
            IsValid = true;
        }

        /// <summary>
        /// втсановлення режиму роботи та моделі даних
        /// </summary>
        /// <param name="mode">Режим.</param>
        /// <param name="metadata">Метадата.</param>
        /// <param name="data">Модель даних.</param>
        public override void SetBusinessObject(ViewMode mode, eARMMetadata metadata, object data)
        {
            base.SetBusinessObject(mode, metadata, data);
            _validationAdaptor.SetValidationObject(GetBusinessObject<object>(), GetAllArmPropertyInfo());
            _validationAdaptor.ValidationCompleted += ValidationAdaptorOnValidationCompleted;
            IsValid = true;
        }

        /// <summary>
        /// Валідацію завершена.  Повернення результату валідації
        /// </summary>
        /// <param name="sender">Відправник.</param>
        /// <param name="validationEventArgs">Аргументи, котрі містять дані.</param>
        private void ValidationAdaptorOnValidationCompleted(object sender, ValidationEventArgs validationEventArgs)
        {
            if (!validationEventArgs.Result.IsValid)
            {
                OnPropertyChanged(validationEventArgs.PropertyName);
            }
            IsValid = validationEventArgs.Result.IsValid;
        }

        /// <summary>
        /// Запускає валідацію передд операцією зберігання.
        /// </summary>
        /// <returns></returns>
        protected bool ValidateBeforeSave()
        {
            if (_validationAdaptor == null)
                return false;
            _validationAdaptor.ValidateAll();
            var res = _validationAdaptor.GetResultForAll();
            IsValid = true;
            foreach (var re in res)
            {
                if (!string.IsNullOrEmpty(re.Value))
                {
                    IsValid = false;
                    OnPropertyChanged(re.Key);
                }
            }
            return IsValid;
        }

        /// <summary>
        /// Форматує заголовок моделі у відповідності до режиму роботи.
        /// </summary>
        /// <param name="format">Формат.</param>
        /// <returns></returns>
        protected string FormatTitle(string format)
        {
            return string.Format(format,
                    Mode == ViewMode.Add
                        ? Resource.AppResource.Resources.Model_Action_Add
                        : Mode == ViewMode.Edit
                            ? Resource.AppResource.Resources.Model_Action_Edit
                            : Mode == ViewMode.View ? Resource.AppResource.Resources.Model_Action_View : "");
        }

        /// <summary>
        /// Повертає повідомлення про помилку для властивості із заданим ім'ям.
        /// </summary>
        /// <param name="columnName">Назва колонки/властивості.</param>
        /// <returns></returns>
        public string this[string columnName]
        {
            get { return _validationAdaptor[columnName]; }
        }

        /// <summary>
        /// Отримує повідомлення про помилку, яке вказує, що сталося з цим об'єктом.
        /// </summary>
        /// <returns>Повідомлення про помилку вказує, що не так з цим об'єктом. За замовчуванням використовується порожній рядок ("").</returns>
        public string Error
        {
            get { return _validationAdaptor.Error; }
        }

        /// <summary>
        /// Викликається при встановленні значення. Потрібно для додаткової функціональності
        /// </summary>
        /// <param name="name">Назва властивості.</param>
        protected override void OnSetValue(string name)
        {
            Validate(name);
        }

        /// <summary>
        /// Визначає, чи доступна команда для виконання.
        /// </summary>
        /// <param name="arg">Аргумент.</param>
        /// <returns>
        ///   <c>true</c> якщо даний екземпляр вказаний обєкт доступний; в іншому випадку <c>false</c>.
        /// </returns>
        protected override bool CanSaveExecte(object arg)
        {
            return IsValid;
        }

        /// <summary>
        /// Перевіряє властивість за вказаним ім'ям.
        /// </summary>
        /// <param name="name">The name.</param>
        private void Validate(string name)
        {
            _validationAdaptor.Validate(name);
        }

        /// <summary>
        /// Повертає або встановлює чи модель є валідна
        /// </summary>
        /// <value>
        ///   <c>true</c> якщо обєкт валідний; інакше, <c>false</c>.
        /// </value>
        public bool IsValid
        {
            get { return Get(() => IsValid); }
            set { Set(() => IsValid, value); }
        }

        /// <summary>
        /// Закриття цього екземпляра.
        /// </summary>
        /// <returns></returns>
        public override bool Closing()
        {
            if (HasChanges && IsValid)
            {
                var result = ARMSystemFacade.Instance.MessageBox.ShowQuestion(Resource.AppResource.Resources.Message_Save);
                if (result == MessageBoxResult.Yes)
                {
                    SaveExecute(null);
                }
                return !IsValid;
            }
            return !IsValid;
        }
    }//end ARMValidatableViewModelBase
}//end namespace MVVM