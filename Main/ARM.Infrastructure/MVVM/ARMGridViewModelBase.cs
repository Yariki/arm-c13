///////////////////////////////////////////////////////////
//  ARMGridViewModelBase.cs
//  Implementation of the Class ARMGridViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 8:12:16 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using ARM.Core.Enums;
using ARM.Core.Interfaces;
using ARM.Core.Interfaces.Data;
using ARM.Core.Module;
using ARM.Core.Service;
using ARM.Data.Layer.Interfaces;
using ARM.Infrastructure.Events;
using ARM.Infrastructure.Events.EventPayload;
using ARM.Infrastructure.Interfaces.Grid;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;

namespace ARM.Infrastructure.MVVM
{
    public abstract class ARMGridViewModelBase<T> : ARMWorkspaceViewModelBase, IARMGridViewModel<T> where T : IARMModel
    {
        private IBll<T> _bll = null;

        public ARMGridViewModelBase(IRegionManager regionManager, IUnityContainer unityContainer, IEventAggregator eventAggregator, IARMGridView view)
            : base(regionManager, unityContainer, eventAggregator, view)
        {
            Toolbox = UnityContainer.Resolve<IARMToolboxViewModel>();
            Toolbox.SetActions(OnToolboxExecute, OnToolboxCanExecute);
            Toolbox.InitializeCommands();
            Init();
        }

        public IEnumerable<T> DataSource 
        { 
            get;
            private set;
        }

        ///
        /// <param name="cmdType"></param>
        public void DoCommand(ToolbarCommand cmdType)
        {
        }

        public IARMToolboxViewModel Toolbox
        {
            get;
            private set;
        }

        public Type EntityType
        {
            get { return typeof(T); }
        }

        public T SelectedEntity { get; set; }

        #region [protected]

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!Disposed)
            {
                if (disposing)
                {
                    if (_bll != null)
                        _bll.Dispose();
                    DataSource = null;
                    EventAggregator.GetEvent<ARMSyncEvent>().Unsubscribe(OnSyncEvent);
                }
            }
        }

        #endregion [protected]

        #region [toolbox commands]

        private void OnToolboxExecute(ToolbarCommand cmd)
        {
            var processEvent = EventAggregator.GetEvent<ARMEntityProcessEvent>();
            switch (cmd)
            {
                case ToolbarCommand.Add:
                    processEvent.Publish(new ARMProcessEntityEventPayload(ARMModelsPropertyCache.Instance.GetMetadataByType(typeof(T)),ViewMode.Add,Guid.Empty));
                    break;
                case ToolbarCommand.Edit:
                    if(SelectedEntity != null)
                        processEvent.Publish(new ARMProcessEntityEventPayload(ARMModelsPropertyCache.Instance.GetMetadataByType(typeof(T)), ViewMode.Edit, SelectedEntity.Id));
                    break;
                case ToolbarCommand.Delete:
                    if (SelectedEntity != null)
                        DeleteEntity(SelectedEntity);    
                    break;
            }
        }

        private bool OnToolboxCanExecute(ToolbarCommand cmd)
        {
            return true;
        }

        #endregion [toolbox commands]

        #region [private]

        private void Init()
        {
            _bll = UnityContainer.Resolve<IBll<T>>();
            if (_bll != null)
            {
                DataSource = _bll.GetAll().ToList();
                OnPropertyChanged(() => DataSource);
            }
            EventAggregator.GetEvent<ARMSyncEvent>().Subscribe(OnSyncEvent);
        }

        private void OnSyncEvent(ARMSyncEventPayload syncPayload)
        {
            if (syncPayload == null || _bll == null)
                return;
            var metadata = ARMModelsPropertyCache.Instance.GetMetadataByType(typeof(T));
            if (metadata != syncPayload.Metadata)
                return;
            UpdateSource();
        }

        private void UpdateSource()
        {

            DataSource = null;
            _bll.Refresh();
            DataSource = _bll.GetAll().ToList();
            OnPropertyChanged(() => DataSource);
        }

        private void DeleteEntity(T entity)
        {
            if (_bll == null)
                return;
            _bll.Delete(entity);
            _bll.Save();
            UpdateSource();
        }

        #endregion [private]
    }//end ARMGridViewModelBase
}//end namespace MVVM