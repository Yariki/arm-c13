///////////////////////////////////////////////////////////
//  ARMModelsPeopertyCache.cs
//  Implementation of the Class ARMModelsPeopertyCache
//  Generated by Enterprise Architect
//  Created on:      29-Mar-2014 4:59:43 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Remoting.Messaging;
using ARM.Core.Attributes;
using ARM.Core.Extensions;
using ARM.Core.Interfaces;
using ARM.Core.Interfaces.Data;
using ARM.Core.Reflection;
using Microsoft.Practices.ObjectBuilder2;

namespace ARM.Core.Service
{
    public class ARMModelsPropertyCache
    {
        private static Dictionary<Type, List<IARMModelPropertyInfo>> _dictCache = null;


        private ARMModelsPropertyCache()
        {
            _dictCache = new Dictionary<Type, List<IARMModelPropertyInfo>>();
            InitCache();
        }

        #region [static]

        private static Lazy<ARMModelsPropertyCache> _instance = new Lazy<ARMModelsPropertyCache>(() => new ARMModelsPropertyCache()); 

        public static ARMModelsPropertyCache Instance
        {
            get { return _instance.Value; }
        }

        #endregion

        
        private void InitCache()
        {
            var listType =
                AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes().Where(t => t is IARMModel));
            foreach (var type in listType)
            {
                AddType(type);
            }
        }

        private static void AddType(Type type)
        {
            var listPi = type.GetAllPublicProperties();
            if (!listPi.Any()) return;
            List<IARMModelPropertyInfo> listArmPi = new List<IARMModelPropertyInfo>();
            foreach (var propertyInfo in listPi)
            {
                bool isRequired = propertyInfo.HasAttribute<RequiredAttributeAttribute>();
                IARMValidationAttribute validAttr = null;
                if (propertyInfo.HasAttribute<ARMValidationAttribute>())
                {
                    validAttr = propertyInfo.GetAttribute<ARMValidationAttribute>();
                }
                listArmPi.Add(new ARMModelPropertyInfo(propertyInfo, isRequired, validAttr));
            }
            _dictCache[type] = listArmPi;
        }

        ///
        /// <param name="type"></param>
        private void AddNewType(Type type)
        {
            Contract.Requires(type != null);
            AddType(type);
        }

        ///
        /// <param name="type"></param>
        public List<IARMModelPropertyInfo> GetPropertyInfos(Type type)
        {
            Contract.Requires(type != null);
            return _dictCache.ContainsKey(type) ? _dictCache[type] : null;
        }
    }//end ARMModelsPeopertyCache
}//end namespace Service