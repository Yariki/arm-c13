///////////////////////////////////////////////////////////
//  ARMViewModelBase.cs
//  Implementation of the Class ARMViewModelBase
//  Generated by Enterprise Architect
//  Created on:      30-Mar-2014 6:35:57 PM
///////////////////////////////////////////////////////////

using System;
using System.ComponentModel;
using System.Linq.Expressions;
using System.Windows.Threading;
using ARM.Core.Interfaces;

namespace ARM.Core.MVVM
{
    /// <summary>
    ///     базова модель представлення. Містить найбільш загальну функціональність.
    ///     Містить методі для видалення данних, для оповіщення користувацього інтерфейсу про зміни.
    /// </summary>
    public abstract class ARMViewModelBase : IARMViewModel
    {
        protected bool Disposed = false;

        /// <summary>
        ///     стрворює новий екземпляр класу
        /// </summary>
        /// <param name="view">модель користувацьго інтерфейсу</param>
        protected ARMViewModelBase(IARMView view)
        {
            View = view;
            SetDataContext();
        }

        #region IARMViewModel Members

        /// <summary>
        ///     подія для оповіщещння про зміни стану.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        ///     модель користувацького інтерфейсу
        /// </summary>
        /// <value>
        ///     The view.
        /// </value>
        public IARMView View { get; protected set; }

        /// <summary>
        ///     Виконує визначаються додатком завдання, пов'язані з вивільненням або скиданням некерованих ресурсів.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion IARMViewModel Members

        /// <summary>
        ///     встановлює контекст данних  для інтерфейсу.
        /// </summary>
        private void SetDataContext()
        {
            Dispatcher.CurrentDispatcher.BeginInvoke(new Action(() => View.DataContext = this));
        }

        /// <param name="propertyName"></param>
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler temp = PropertyChanged;
            if (temp != null)
            {
                temp(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <param name="exp"></param>
        protected void OnPropertyChanged<T>(Expression<Func<T>> exp)
        {
            var memberExpression = exp.Body as MemberExpression;
            if (memberExpression == null)
                throw new ArgumentException("Expression is empty");
            OnPropertyChanged(memberExpression.Member.Name);
        }

        /// <summary>
        ///     Gets the name of the property.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="exp">The exp.</param>
        /// <returns></returns>
        protected string GetPropertyName<T>(Expression<Func<T>> exp)
        {
            var memExpression = exp.Body as MemberExpression;
            if (memExpression == null)
                return string.Empty;
            return memExpression.Member.Name;
        }

        /// <summary>
        ///     Звільняє некеровані і - можливо - керовані ресурси.
        /// </summary>
        /// <param name="disposing">
        ///     <c>true</c> щоб звільнити керовані і некеровані ресурси; <c>false</c> щоб звільнити тільки
        ///     некеровані ресурси.
        /// </param>
        protected virtual void Dispose(bool disposing)
        {
            Disposed = true;
        }
    } //end ARMViewModelBase
} //end namespace MVVM