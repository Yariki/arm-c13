///////////////////////////////////////////////////////////
//  BaseDal.cs
//  Implementation of the Class BaseDal
//  Generated by Enterprise Architect
//  Created on:      29-Mar-2014 5:16:38 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ARM.Data.Layer.Interfaces;
using ARM.Data.Models;

namespace ARM.Data.Layer.Context
{
    /// <summary>
    /// Базова реалізація класу доступу до даних БД.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class BaseDal<T> : IDal<T> where T : BaseModel
    {
        /// <summary>
        /// Конекст БД.
        /// </summary>
        protected IContext<T> Context;

        /// <summary>
        /// Ініціалізує новий екземпляр класу <see cref="BaseDal{T}"/>.
        /// </summary>
        /// <param name="context">Контекст.</param>
        public BaseDal(IContext<T> context)
        {
            Context = context;
        }

        /// <summary>
        /// Додає новий елемент в БД.
        /// </summary>
        /// <param name="obj">Елемент.</param>
        public void Insert(T obj)
        {
            Context.GetItems().Add(obj);
        }

        /// <summary>
        /// Додає список елементів в БД.
        /// </summary>
        /// <param name="list">Список елементів.</param>
        public void InsertAll(IEnumerable<T> list)
        {
            var items = Context.GetItems();
            foreach (var item in list)
            {
                items.Add(item);
            }
        }

        /// <summary>
        /// Оновлення елементу в БД.
        /// </summary>
        /// <param name="obj">Елемент.</param>
        public void Update(T obj)
        {
            Context.Update(obj);
        }

        /// <summary>
        /// Видалення елементу з БД.
        /// </summary>
        /// <param name="obj">Елемент.</param>
        public void Delete(T obj)
        {
            if (obj == null)
                return;
            var entry = Context.GetItems().Find(obj.Id);
            DeleteAddInfo(entry);
            Context.GetItems().Remove(entry);
        }

        /// <summary>
        /// Повернути всі записи.
        /// </summary>
        /// <returns></returns>
        public IEnumerable<T> GetAll()
        {
            return Context.GetItems().AsEnumerable();
        }

        /// <summary>
        /// Повернути запис у відповідності до його ідентифікатора.
        /// </summary>
        /// <param name="id">Ідентифікатор.</param>
        /// <returns></returns>
        public T GetById(Guid id)
        {
            return Context.GetItems().FirstOrDefault(item => item.Id == id);
        }

        /// <summary>
        /// Зберегти зміни в БД.
        /// </summary>
        public void Save()
        {
            if (Context != null)
            {
                Context.Save();
            }
        }

        /// <summary>
        /// Оновити дані з БД.
        /// </summary>
        public void Refresh()
        {
            Context.Refresh();
        }

        /// <summary>
        /// Отримати елементи з всіма задежними елементами.
        /// </summary>
        /// <returns></returns>
        public virtual IEnumerable<T> GetAllWithRelated()
        {
            return Context.GetItems().AsEnumerable();
        }

        /// <summary>
        /// Отримати всі в залежності від фільтра.
        /// </summary>
        /// <param name="filter">Фільтр.</param>
        /// <returns></returns>
        public IEnumerable<T> GetAll(Func<T, bool> filter)
        {
            if (filter == null)
                return Context.GetItems().AsEnumerable();
            return Context.GetItems().Where(filter).AsEnumerable();
        }

        /// <summary>
        /// Отримати всі в залежності від виразу.
        /// </summary>
        /// <param name="filter">Вираз.</param>
        /// <returns></returns>
        public IEnumerable<T> GetAll(Expression<Func<T, bool>> filter)
        {
            if (filter == null)
                return Context.GetItems().AsEnumerable();
            return Context.GetItems().Where(filter).AsEnumerable();
        }

        /// <summary>
        /// Отримати елемент як Queryable.
        /// </summary>
        /// <returns></returns>
        public IQueryable<T> GetAsQueryable()
        {
            return Context.GetItems().AsQueryable();
        }

        /// <summary>
        /// Виконує визначаються додатком завдання, пов'язані з вивільненням або скиданням некерованих ресурсів.
        /// </summary>
        public void Dispose()
        {
            if (Context != null)
                Context.Dispose();
        }

        /// <summary>
        /// Видаляє відомості надбудови.
        /// </summary>
        /// <param name="entity">Елемент.</param>
        protected virtual void DeleteAddInfo(T entity)
        {
        }
    }//end BaseDal
}//end namespace Context