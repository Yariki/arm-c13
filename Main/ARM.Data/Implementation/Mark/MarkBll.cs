///////////////////////////////////////////////////////////
//  MarkBll.cs
//  Implementation of the Class MarkBll
//  Generated by Enterprise Architect
//  Created on:      29-Mar-2014 5:16:43 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using ARM.Data.Interfaces.Mark;
using ARM.Data.Layer.Context;
using ARM.Data.Layer.Interfaces;

namespace ARM.Data.Implementation.Mark
{
    /// <summary>
    /// Простір імен для реалізації функциональності по роботі з - оцінками
    /// </summary>
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal class NamespaceDoc
    {
    }

    /// <summary>
    /// Реалізація бізнес логіки для оцінок
    /// </summary>
    public class MarkBll : BaseBll<Models.Mark>, IMarkBll
    {
        /// <summary>
        /// Створити екземпляр <see cref="MarkBll"/> class.
        /// </summary>
        /// <param name="dal">The dal.</param>
        public MarkBll(IDal<Models.Mark> dal)
            : base(dal)
        {
        }

        /// <summary>
        /// Повернути список оцінок за списками студентів і заннять.
        /// </summary>
        /// <param name="listStudents">Списко студентів.</param>
        /// <param name="listClasses">Список класів.</param>
        /// <returns></returns>
        public IQueryable<Models.Mark> GetMarkAccordingStudentsAndClasses(IEnumerable<Guid> listStudents, IEnumerable<Guid> listClasses)
        {
            return
                Dal.GetAsQueryable()
                    .Where(m => listStudents.Contains(m.StudentId.Value) && listClasses.Contains(m.ClassId.Value));
        }

        /// <summary>
        /// Отримати суму балыв для студента по заняттю.
        /// </summary>
        /// <param name="studendId">Ідентифікатор студента.</param>
        /// <param name="classId">Ідентифікатор заннятя.</param>
        /// <returns></returns>
        /// <exception cref="System.NotImplementedException"></exception>
        public decimal? GetSumRateForStudentAndClass(Guid studendId, Guid classId)
        {
            var isPres = Dal.GetAsQueryable().Any(m => m.StudentId.HasValue && m.ClassId.HasValue && m.StudentId.Value == studendId &&
                                                       m.ClassId.Value == classId);
            return isPres ?  Dal.GetAsQueryable()
                .Where(m => m.StudentId.HasValue && m.ClassId.HasValue && m.StudentId.Value == studendId && m.ClassId.Value == classId)
                .Sum(m => m.MarkRate) : 0;
        }
    } //end MarkBll
} //end namespace Mark