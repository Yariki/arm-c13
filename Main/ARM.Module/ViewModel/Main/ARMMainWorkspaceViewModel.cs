///////////////////////////////////////////////////////////
//  ARMMainWorkspaceViewModel.cs
//  Implementation of the Class ARMMainWorkspaceViewModel
//  Generated by Enterprise Architect
//  Created on:      02-Apr-2014 1:17:47 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Windows.Controls;
using ARM.Core.Enums;
using ARM.Core.Interfaces;
using ARM.Core.MVVM;
using ARM.Data.Models;
using ARM.Infrastructure.Events;
using ARM.Infrastructure.Events.EventPayload;
using ARM.Module.Enums;
using ARM.Module.Interfaces;
using ARM.Module.Interfaces.References.ViewModel;
using ARM.Module.Interfaces.View;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;
using Xceed.Wpf.Toolkit;

namespace ARM.Module.ViewModel.Main
{
    public class ARMMainWorkspaceViewModel : ARMViewModelBase, IARMMainWorkspaceViewModel
    {
        private readonly IUnityContainer _unityContainer;
        private readonly IEventAggregator _eventAggregator;

        private IARMWorkspaceViewModel _current;
        private int _currentIndex;

        #region [needs]

        private SubscriptionToken _tokenProcess;
        private SubscriptionToken _tokenClose;

        #endregion


        public ARMMainWorkspaceViewModel(IUnityContainer unityContainer, IEventAggregator eventAggregator, IARMMainWorkspaceView workspaceView)
            : base(workspaceView)
        {
            Items = new ObservableCollection<IARMWorkspaceViewModel>();
            _unityContainer = unityContainer;
            _eventAggregator = eventAggregator;
            Menu = _unityContainer.Resolve<IARMMainMenuViewModel>();
            Toolbox = _unityContainer.Resolve<IARMMainToolboxViewModel>();
            StatusBar = _unityContainer.Resolve<IARMMainStatusBarViewModel>();
            Menu.SetActions(OnMenuExecute, OnMenuCanExecute);
            Menu.InitializeCommands();
            InitEventAggregator();
        }

        private void InitEventAggregator()
        {
            if (_eventAggregator == null)
                return;
            var addEvent = _eventAggregator.GetEvent<ARMEntityProcessEvent>();
            if (addEvent != null)
            {
                _tokenProcess = addEvent.Subscribe(OnProcessEntity);
            }
            var closeEvent = _eventAggregator.GetEvent<ARMCloseEvent>();
            if (closeEvent != null)
            {
                _tokenClose = closeEvent.Subscribe(OnCloseModel);
            }
        }

        public IARMView MenuView
        {
            get { return Menu.View; }
        }

        public IARMView ToolboxView
        {
            get { return Toolbox.View; }
        }

        public IARMView StatusBarView
        {
            get { return StatusBar.View; }
        }

        public IARMMainMenuViewModel Menu { get; private set; }

        public IARMMainToolboxViewModel Toolbox { get; private set; }

        public IARMMainStatusBarViewModel StatusBar { get; private set; }
        public event EventHandler Close;

        public void OnClosing(CancelEventArgs arg)
        {

        }

        public ObservableCollection<IARMWorkspaceViewModel> Items { get; private set; }

        public int CurrentWorkspaceIndex
        {
            get { return _currentIndex; }
            set
            {
                _currentIndex = value;
                OnPropertyChanged(() => CurrentWorkspaceIndex);
                CurrentWorkspace = Items.ElementAt(_currentIndex);
            }
        }

        public IARMWorkspaceViewModel CurrentWorkspace 
        {
            get { return _current; }
            set
            {
                _current = value;
                OnPropertyChanged(() => CurrentWorkspace );
            }
        }

        #region [private]

        #region [menu]

        private void OnMenuExecute(eARMMainMenuCommand cmd)
        {
            IARMWorkspaceViewModel workspaceViewModel = null;
            switch (cmd)
            {
                case eARMMainMenuCommand.Exit:
                    if (Close != null)
                        Close(this, EventArgs.Empty);
                    break;
                case eARMMainMenuCommand.ReferenceUniversity:
                    workspaceViewModel = _unityContainer.Resolve<IARMGridViewModel<University>>();
                    break;
                case eARMMainMenuCommand.ReferenceStaff:
                    workspaceViewModel = _unityContainer.Resolve<IARMGridViewModel<Staff>>();
                    break;
            }
            if (workspaceViewModel != null)
            {
                Items.Add(workspaceViewModel);
                CurrentWorkspace = workspaceViewModel;
            }
        }

        private bool OnMenuCanExecute(eARMMainMenuCommand cmd)
        {
            return true;
        }

        #endregion

        #region [global event ]

        private void OnProcessEntity(ARMProcessEntityEventPayload obj)
        {
            if (obj == null)
                return;
            IARMDataViewModel viewModel = null;
            switch (obj.Metadata)
            {
                case eARMMetadata.University:
                    viewModel = _unityContainer.Resolve<IARMUniversityDataViewModel>();
                    if (viewModel != null)
                    {
                        viewModel.SetBusinessObject(obj.Mode,eARMMetadata.University,obj.Id);
                        Items.Add(viewModel);
                    }
                    break;
                case eARMMetadata.Staff:
                    viewModel = _unityContainer.Resolve<IARMStaffValidatableViewModel>();
                    if (viewModel != null)
                    {
                        viewModel.SetBusinessObject(obj.Mode,eARMMetadata.Staff, obj.Id);
                        Items.Add(viewModel);
                    }
                    break;
            }
            CurrentWorkspace = viewModel;
            _currentIndex = Items.IndexOf(CurrentWorkspace);
            OnPropertyChanged(() => CurrentWorkspaceIndex);
        }

        private void OnCloseModel(ARMCloseEventPayload obj)
        {
            if (obj == null || obj.Model == null)
                return;
            Items.Remove(obj.Model);
            obj.Model.Dispose();
        }

        #endregion

        #endregion



    } //end ARMMainWorkspaceViewModel
} //end namespace Main